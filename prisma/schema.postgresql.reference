// PostgreSQL Schema Reference for Production Deployment
// 
// This is a reference file for PostgreSQL deployment.
// DO NOT rename to .prisma extension as it will conflict with the main schema.
// 
// Usage:
// - The migrate-to-postgres.js script will automatically use this file
// - Or manually copy contents to schema.prisma when deploying to production
// 
// This schema is optimized for Vercel/Netlify deployment with PostgreSQL

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User models
model User {
    id        String   @id @default(cuid())
    email     String   @unique
    name      String?
    password  String
    phone     String?
    role      UserRole @default(CUSTOMER)
    avatar    String?
    address   String?
    city      String?
    state     String?
    country   String?
    zipCode   String?
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    orders          Order[]
    cartItems       CartItem[]
    reviews         Review[]
    wishlist        Wishlist[]
    newsletter      NewsletterSubscription?
    upiTransactions UpiTransaction[]
    savedVpas       UserSavedVpa[]

    @@map("users")
}

enum UserRole {
    CUSTOMER
    ADMIN
    SUPER_ADMIN
}

// Product models
model Category {
    id          String   @id @default(cuid())
    name        String   @unique
    slug        String   @unique
    description String?
    image       String?
    parentId    String?
    isActive    Boolean  @default(true)
    sortOrder   Int      @default(0)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    parent   Category?  @relation("CategoryParent", fields: [parentId], references: [id])
    children Category[] @relation("CategoryParent")
    products Product[]

    @@map("categories")
}

model Brand {
    id          String   @id @default(cuid())
    name        String   @unique
    slug        String   @unique
    logo        String?
    website     String?
    description String?
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    products Product[]

    @@map("brands")
}

model Product {
    id                String   @id @default(cuid())
    name              String
    slug              String   @unique
    description       String
    shortDesc         String?
    sku               String   @unique
    barcode           String?
    price             Float
    mrp               Float
    cost              Float?
    categoryId        String
    brandId           String
    images            Json?
    specifications    Json?
    features          Json?
    isActive          Boolean  @default(true)
    isFeatured        Boolean  @default(false)
    isNew             Boolean  @default(false)
    stockQuantity     Int      @default(0)
    lowStockThreshold Int      @default(10)
    weight            Float?
    dimensions        Json?
    tags              Json?
    metaTitle         String?
    metaDesc          String?
    metaKeywords      String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    // Relations
    category   Category    @relation(fields: [categoryId], references: [id])
    brand      Brand       @relation(fields: [brandId], references: [id])
    orderItems OrderItem[]
    reviews    Review[]
    wishlist   Wishlist[]
    cartItems  CartItem[]

    @@map("products")
}

// Order models
model Order {
    id              String        @id @default(cuid())
    orderNumber     String        @unique
    userId          String
    status          OrderStatus   @default(PENDING)
    total           Float
    subtotal        Float
    tax             Float         @default(0)
    shipping        Float         @default(0)
    discount        Float         @default(0)
    paymentStatus   PaymentStatus @default(PENDING)
    paymentMethod   String?
    paymentId       String?
    shippingAddress Json
    billingAddress  Json?
    notes           String?
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    // Relations
    user            User             @relation(fields: [userId], references: [id])
    items           OrderItem[]
    upiTransactions UpiTransaction[]

    @@map("orders")
}

model OrderItem {
    id        String   @id @default(cuid())
    orderId   String
    productId String
    quantity  Int
    price     Float
    total     Float
    createdAt DateTime @default(now())

    // Relations
    order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id])

    @@map("order_items")
}

enum OrderStatus {
    PENDING
    CONFIRMED
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    RETURNED
}

enum PaymentStatus {
    PENDING
    PAID
    FAILED
    REFUNDED
    PARTIALLY_REFUNDED
}

// Cart models
model CartItem {
    id        String   @id @default(cuid())
    userId    String
    productId String
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([userId, productId])
    @@map("cart_items")
}

// Review models
model Review {
    id        String   @id @default(cuid())
    userId    String
    productId String
    rating    Int
    title     String?
    comment   String?
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([userId, productId])
    @@map("reviews")
}

// Wishlist models
model Wishlist {
    id        String   @id @default(cuid())
    userId    String
    productId String
    createdAt DateTime @default(now())

    // Relations
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([userId, productId])
    @@map("wishlist")
}

// Newsletter models
model NewsletterSubscription {
    id             String    @id @default(cuid())
    email          String    @unique
    userId         String?   @unique
    isActive       Boolean   @default(true)
    subscribedAt   DateTime  @default(now())
    unsubscribedAt DateTime?

    // Relations
    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@map("newsletter_subscriptions")
}

// UPI Payment models
model UpiTransaction {
    id                   String           @id @default(cuid())
    orderId              String
    userId               String?
    gatewayTransactionId String?
    amount               Float
    currency             String           @default("INR")
    status               UpiPaymentStatus @default(PENDING)
    vpa                  String
    errorMessage         String?
    webhookData          Json?
    createdAt            DateTime         @default(now())
    updatedAt            DateTime         @updatedAt

    // Relations
    order Order @relation(fields: [orderId], references: [id])
    user  User? @relation(fields: [userId], references: [id])

    // Indexes for performance
    @@index([orderId])
    @@index([userId])
    @@index([gatewayTransactionId])
    @@index([status])
    @@map("upi_transactions")
}

model UserSavedVpa {
    id        String   @id @default(cuid())
    userId    String
    vpa       String
    isDefault Boolean  @default(false)
    createdAt DateTime @default(now())

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Constraints
    @@unique([userId, vpa])
    @@index([userId])
    @@map("user_saved_vpas")
}

model UpiSettings {
    id             String   @id @default(cuid())
    provider       String // razorpay, payu, phonepe, gpay, mock
    apiKey         String // Encrypted
    apiSecret      String // Encrypted  
    merchantId     String // Encrypted
    webhookSecret  String // Encrypted
    isTestMode     Boolean  @default(true)
    isActive       Boolean  @default(false)
    webhookUrl     String?
    timeoutMinutes Int      @default(15)
    maxRetries     Int      @default(3)
    name           String // Configuration name
    description    String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    @@map("upi_settings")
}

enum UpiPaymentStatus {
    PENDING
    SUCCESS
    FAILED
    REFUNDED
    EXPIRED
}
